1)O MongoDB é escrito em C++ e transforma o JSON em BSON que é JSON binário. 

2)O MongoDB consegue alocar os dados binariamente de uma maneira sequencial no HD isso deixa a busca muito mais rápida do que alocar os dados em locais diferentes do HD 

3)Terminologia entre MongoDB e SQL

SQL			MongoDB
DATABASE		DATABASE
TABLE			COLLECTION
ROWS 			DOCUMENT
QUERY			JSON
INDEX			INDEX
PARTITION		SHARD


4)Instalação em Linux: 

Primeiro, para garantir a autenticidade e consistencia dos pacotes do MongoDb:
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10

Depois precisa criar uma lista de arquivos para o MongoDB

echo "deb http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/soures.list.d/mongodb-org-3.0.list

Ubuntu 16:
echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list

Por fim, rodar o comando:
sudo apt-get update
sudo pat-get install -y --allow-unauthenticated mongodb-org





5) Pode executar o mongod que verá o "mongo" rodando no seu terminal. O arquivo /etc/mongod.conf contém a configuração padrão do mongod. Também podemos rodar o mongod como serviço, neste caso o usuário padrão é o mongod e o diretório dos dados será em /var/lib/mongo, os logs ficarão em /var/log/mongodb -> sudo service mongod start

6)MongoDb Cliente

Depois de utilizarmos o MongoDB precisamos rodar seu cliente para que possamos interagir com ele via linha de comando, para isso basta executar o comando "mongo" no seu terminal. Executando dessa forma ele irá se conectar em uma database chamada test, para que  você execute o cliente diretamente em uma database específica, basta passar o nome dela logo após o comando:
Ex: mongo be-mean-instagram



7)Para ver a versão mongod --version. E para ver a versão do seu cliente: mongo --version


8) O mongodb foi pensado em escalar horizontalmente
Escalabilidade Horizontal

Existem 2 tipo de escalabilidade, a horizontal e a vertical. Qual suas diferenças?

É bem simples, normalmente quando você utiliza bancos de dados relacionais sua performance do banco aumenta quando você aumenta o poder do servidor como adicionar mais memória RAM, SSD. Nesse caso você faz ele crescer para cima.

Na escalabilidade horizontal há um ganho na distribuição de dados, pois quanto mais dados forem armazenados, o número de servidores aumentarão e há uma otimização no armazenamento dos dados, já que eles serão divididos entre todos os servidores, facilitando o gerenciamento e o processamento dos dados



9) Temos vários grupos Banco de Dados NoSQL:

Grupo Chave/Valor
Grupo Documento
Grupo Grafo
Grupo Coluna

Chave/Valor -> Esse tipo de banco de dados são utilizados para resolver o problema de cache, pois a estrutura que eles usam é bem simples, é a estrutura que temos em qualquer banco como índice.

Sabe quando você vai criar um índice na sua tabela de banco de dados para que ela tenha maior velocidade nas buscas?

Então é a mesma coisa aqui, a estrutura de uma entidade nesse tipo de banco segue a seguinte regra:
chave: valor

Então com uma chave específica você acessará diretamente essa entidade que pode ser apenas: um número, uma palavra, um array, um objeto, qualquer coisa. Porém você só consegue acessar essa entidade e seus valores a partir da chave, logo você não possui uma busca pelos valores internos. Vou dar um exemplo simples em JavaScript:

> var banco_chave_valor = [];

> var valor = {name: "Suissa", teacher: true};

> vanco_chave_valor["minha-chave-unica-malandrinha"] = valor
{ name: 'Suissa', teacher: true }

> banco_chave_valor
[ 'minha-chave-unica-malandrinha': { name: 'Suissa', teacher: true } ]

O que fiz foi criar um array vazio em "banco_chave_valo" e depois crio uma entidade chamada valor contendo o seguinte objeto: { name: 'Suissa', teacher: true } e atribuo esse valor à minha chave "minha-chave-unica-malandrinha"

Agora caso estivermos em um banco de Chave/Valor nós só podemos acessar os valores dessa entidade se buscarmos pela sua chave "minha-chave-unica-malandrinha" para depois acessarmos seus valores internamente:

> var busca_entidade_malandrinha = banco_chave_valor['minha-chave-unica-malandrinha']

> busca_entidade_malandrinha
{ name: 'Suissa', teacher: true }

> busca_entidade_malandrinha.name
'Suissa'

Bem simples esse conceito não? E como a maioria desses bancos funcionam operando apenas na RAM, para depois persistir, no caso de alguns





10)Links:

1 - https://github.com/Webschool-io/MongoDb-ebook/blob/master/pt-br/theory-nosql.md
2 - http://www.devmedia.com.br/java-ee-6-com-mongodb-na-pratica-revista-java-magazine-97/22827
3 - http://mongodb.github.io/mongo-java-driver/2.13/getting-started/quick-tour/
4 - https://www.youtube.com/watch?v=leYxsEAL_yY
5 - https://www.youtube.com/watch?v=hTbiMzpqTLo&index=2&list=PLpUnxEKo-_NmcyZ1aPAKxkk_2vBFjUwIX
6 - 
