1)If you have maven project, just add below dependency to include MongoDB java driver into your application. 
<Dependency>
  <GroupId>org.mongodb</groupId>
  <ArtifactId>mongo-java-piloto</artifactId>
  <Version>2.12.3</version>
</Dependency>

If you have a standalone project, you can download MonogDB Java Driver and include it in your project build path

Now let's go through some basic usage of MongoDB java driver and then we will look into MongoDB Java Example program for CRUD 
operations.

MongoClient is the interface between our java program and MongoDB server. MongoClient is used to create connection, connect to 
database, retrieve collection names and create/read/update/delete database, collections, document, etc

One of the MongoDB java driver feature I like most is that it's thread save, so we can create an instance of MongoClient once 
and reuse it. Even if multiple thread accesses it simultaneously,   a connection is returned from the internal connection pool
maintained by it.

For every request to the database (find, insert, etc) the Java thread will obtain a connection from the pool, execute the opera
tion , and release the connection. This means the connection (socket) used may be different each time.


Below are some of the common methods to connect to a MongoDB server.

MongoClient mongoClient = new MongoClient(); //connects to default host and port is 127.0.0.1:27017
or
MongoClient mongoClient = new MongoClient("localhost"); //Connects to default port 27017
or
MongoClient mongoClient = new MongoClient( "localhost" , 27017 ); //should use this always

If you to connect to a replica set, with auto-discovery of the primary try this:
MongoClient mongoClient = new MongoClient(Arrays.asList(new ServerAddress("localhost", 27017);


2) Once we get the connection to MongoDB server, next step is to create the connection to the database, as shown below. Note
that if database is not present, MongoDB will create it for you:
DB my_database = mongoClient.getDB("test_db");

MongoClient provide a useful method to get all the database names, as shown below:

List<String> allDatabases = mongoClient.getDatabaseNames();
System.out.println(allDatabases); // [Journaldev, local, admin]
