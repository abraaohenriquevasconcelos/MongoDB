1)If you have maven project, just add below dependency to include MongoDB java driver into your application. 
<Dependency>
  <GroupId>org.mongodb</groupId>
  <ArtifactId>mongo-java-piloto</artifactId>
  <Version>2.12.3</version>
</Dependency>

If you have a standalone project, you can download MonogDB Java Driver and include it in your project build path

Now let's go through some basic usage of MongoDB java driver and then we will look into MongoDB Java Example program for CRUD 
operations.

MongoClient is the interface between our java program and MongoDB server. MongoClient is used to create connection, connect to 
database, retrieve collection names and create/read/update/delete database, collections, document, etc

One of the MongoDB java driver feature I like most is that it's thread save, so we can create an instance of MongoClient once 
and reuse it. Even if multiple thread accesses it simultaneously,   a connection is returned from the internal connection pool
maintained by it.

For every request to the database (find, insert, etc) the Java thread will obtain a connection from the pool, execute the opera
tion , and release the connection. This means the connection (socket) used may be different each time.


Below are some of the common methods to connect to a MongoDB server.

MongoClient mongoClient = new MongoClient(); //connects to default host and port is 127.0.0.1:27017
or
MongoClient mongoClient = new MongoClient("localhost"); //Connects to default port 27017
or
MongoClient mongoClient = new MongoClient( "localhost" , 27017 ); //should use this always

If you to connect to a replica set, with auto-discovery of the primary try this:
MongoClient mongoClient = new MongoClient(Arrays.asList(new ServerAddress("localhost", 27017);


2) Once we get the connection to MongoDB server, next step is to create the connection to the database, as shown below. Note
that if database is not present, MongoDB will create it for you:
DB my_database = mongoClient.getDB("test_db");

MongoClient provide a useful method to get all the database names, as shown below:

List<String> allDatabases = mongoClient.getDatabaseNames();
System.out.println(allDatabases); // [Journaldev, local, admin]


3)We can have user-password based authentication for databases, in that case we need to provide authorization credentials
like below:

MongoCredential mongoCredential = MongoCredential.createPlainCredential("henrique", "journaldev", "pankaj123" .toCharArray());
String s = "João da Silva";
char[] charArray = s.toCharArray();
		
for(char c : charArray){
	System.out.println("["+c+"]");
}
[J]
[o]
[ã]
[o]
[ ]
[d]
[a]
[ ]
[S]
[i]
[l]
[v]
[a]

MongoCredential testAuth = MongoCredential.createPlainCredential("pankaj", "teste", "pankaj123" .toCharArray());
List<MongoCredential> auths = new ArrayList<MongoCredential>();
auths.add(mongoCredential);
auths.add(testAuth);

ServerAddress serverAddress = new ServerAddress("localhost", 27017);
MongoClient mongoClient = new MongoClient(serverAddress, auths);

If you are using older versions, you need to provide authentication datails after getting the database object like below:
MongoClient mongoClient = new MongoClient("localhost", 27017);
DB my_db = mongoClient.getDB("journaldev");
boolean auth_bool = my_db.authenticate("pankaj", "pankaj123" .toCharArray());
You can easily figure out flaws in the earlier approach, the authentication should be done at early stage because we can't
recover from it.

We can drop a database either by using MongoClient dropDatabase(String db) method or by DB dropDatabase() method. Since(uma 
vez que) we are dropping the database, I prefer to use MongoClient  method.

4)MongoDB and Collections
Every database can have zero or multiple collections, they are like tables in relational database servers except that you
don't have specific format of data. Think of it(pense nisso) like a generic list vs list of Strings in terms of java 
programming language. 

We can get all the collections names using below code:
MongoClient mongoClient = new MongoClient("localhost", 27017);
Db my_db = mongoClient.getDB("journaldev");
Set<String> colecoes = my_db.getCollectionNames();

We can get a specific collection by providing it's name, as shown below.
DB my_db = mongoClient.getDB("journaldev");
DBCollection collection1 = my_db.getCollection("usuarios");
Again if the collection doesn't exist, MongoDB will create it for you. All t
he data in MongoDB goes into some collection, so
at this point we are ready to perform insert/update/delete operations

5) Um documento no MongoDB tem as mesmas características do JSON que é "campo" e "valor" 
{
  name: "Sue",
  age: 26,
  status: "A",
  groups: ["news", "sports"]
}

MongoDB stores all documents in collections. A collection is a group of related documents that fave a set of shared common
indexes.

1Para criar um banc usamos o comando: use bancoMongoDB1.
2Para mostrar todos os bancos existentes: show dbs
3Para mostrar o banco em que estamos atualmente: db
4Não precisamos explicitamente criar uma collection, basta inserir um documento que MongoDB criará a collection
5Então para criar a colecão e um documento de uma vez só fazemos db.<nome_da_colecao>.insert({ ... }). A coleção não existia 
antes de rodar o comando de inserção do documento:
db.usuarios.insert({
  usuario_id: 1,
  idade: 55,
  status: "A"
})
6Para selecionar todos os documentos: db.usuarios.find()
